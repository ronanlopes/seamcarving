#include "Grafos.h"

void CriaGrafo(TipoGrafo *grafo, Imagem imagem){
	(*grafo).numvertices=imagem.w*imagem.h;								//calcula numero de vertices
	(*grafo).InicioLista=(PonteiroLista) malloc(((*grafo).numvertices+1)*sizeof(TipoLista));		//aloca a lista de adjacencia
	int i;
	int j;
	int k;
	int contvertice=1;
	for (i=0;i<imagem.h;i++){					//percorre a matriz com os pixels
		for (j=0;j<imagem.w;j++){
			(*grafo).InicioLista[contvertice].inicio=(Ponteiro) malloc(sizeof(Celula));			//Cria Celula cabeça
			(*grafo).InicioLista[contvertice].fim=(*grafo).InicioLista[contvertice].inicio;			//aponta o fim para o inicio
			if (i!=(imagem.h-1)){
				for (k=j-1;k<=j+1;k++){
					if ((k!=-1) && (k!=imagem.h)){
						(*grafo).InicioLista[contvertice].fim->prox=(Ponteiro) malloc(sizeof(Celula));		//Cria nova celula
						(*grafo).InicioLista[contvertice].fim=(*grafo).InicioLista[contvertice].fim->prox;	//aponta o fim para a nova celula
						(*grafo).InicioLista[contvertice].fim->vertice=((i+1)*imagem.w)+k+1;			//calcula o vertice adjacente a partir do vertice em análise
						(*grafo).InicioLista[contvertice].fim->x=i+1;
						(*grafo).InicioLista[contvertice].fim->y=k;						//guarda a posicao do vertice adjacente
						(*grafo).InicioLista[contvertice].fim->peso=CalculaEnergiaPixel(imagem,i+1,k);		//calcula o peso da aresta(energia do pixel adjacente)
						(*grafo).InicioLista[contvertice].fim->prox=NULL;					//aponta o proximo do fim para NULL
					}
				}
			}
			contvertice++;
		}
	}
}

void ProxAdj(int vertice, TipoGrafo grafo, int *verticeadj, float *peso, Ponteiro *aux, int *FimListaAdj){
	if ((*aux)!=NULL){
		(*verticeadj)=(*aux)->vertice;
		(*peso)=(*aux)->peso;
		(*aux)=(*aux)->prox;
		if ((*aux)==NULL){
			*FimListaAdj=1;
		}
		else{
			*FimListaAdj=0;
		}
	}
}

Ponteiro PrimeiroListaAdj(int vertice, TipoGrafo grafo){
	return(grafo.InicioLista[vertice].inicio->prox);
}

int ListaAdjVazia(int vertice, TipoGrafo grafo){
	return(grafo.InicioLista[vertice].inicio==grafo.InicioLista[vertice].fim);
}

void ImprimeGrafo(TipoGrafo grafo){
	int i=0;
	Ponteiro aux;
	for (i=1;i<=grafo.numvertices;i++){
		aux=grafo.InicioLista[i].inicio->prox;
		printf("VERTICE: %d\n",i);
		while (aux!=NULL){
			printf("ADJ: %d POSICAO: %d,%d PESO: %f\n",aux->vertice,aux->x,aux->y,aux->peso);
			aux=aux->prox;
		}
		printf("\n-----------------------------------\n");
	}
}

void LiberaGrafo(TipoGrafo *grafo){
	int i;
	Ponteiro aux,aux2;
	for (i=0;i<(*grafo).numvertices;i++){
		aux = (*grafo).InicioLista[i].inicio->prox;
		free((*grafo).InicioLista[i].inicio);
		while(aux!=NULL){
			aux2=aux;
			aux=aux->prox;
			free(aux2);
		}
	}
	free((*grafo).InicioLista);
}

//heap indireto

void refazer(TipoHeap heap, int esq,int dir,int *pos){
	int j = esq*2;
	int aux = pos[esq];
	CelulaHeap x = heap[esq];
	while(j<=dir){
		if (j<dir){
			if (heap[j].peso>heap[j+1].peso) {
				j++;
			}
		}
		if (heap[aux].peso<=heap[j].peso){
			break;
		}
		heap[esq]=heap[j];
		pos[heap[j].vertice]=esq;
		esq=j;
		j=esq*2;
	}
	heap[pos[esq]]=x;
	pos[pos[aux]]=esq;
}

void construir(TipoHeap heap, int dir, int *pos){
	int esq= dir/2+1;
	while (esq>1){
		esq--;
		refazer(heap,esq,dir,pos);
	}
}

CelulaHeap retirarmenor(TipoHeap heap,int *n,int *pos){
	CelulaHeap minimo;					//retorna -1 se nao tem nenhum elemento.
	minimo.vertice=-1;
	minimo.peso=-1;
	if ((*n)>=1){					//se tem elementos no heap.
		minimo=heap[pos[1]];			//retira a primeira posicao.
		heap[pos[1]]=heap[pos[(*n)]];			//agora a posicao 1 recebe a ultima posicao
		heap[(*n)]=minimo;
		(*n)--;					//o tamanho do heap é decrementado
		pos[heap[(*n)].vertice];
		refazer(heap,1,(*n),pos);		//refaz o heap.
	}
	return minimo;
}

void DiminuiChave(TipoHeap heap,int i, int novopeso, int *pos){
	i=pos[i];
	int aux=heap[i].vertice;
	if (novopeso<=heap[i].peso){
		heap[aux].peso=novopeso;
		int aux_heap=heap[i];
		while ((i>1)&&(heap[i/2].peso>heap[i].peso)){
			//heap[i]=heap[i/2];
			pos[heap[i/2].vertice]= i;
			i=i/2;
		}
		heap[i]=heap[aux];
		pos[aux]=i;
	}
}

//fim heap indireto

void Dijkstra(TipoGrafo *grafo,TipoHeap heap,int *pos){
	Ponteiro aux;
	int FimListaAdj,vertice,n;
	CelulaHeap u,v;
	float peso;
	n=(*grafo).numvertices;
	int iteracao=1;
	while(n>=1){
		u = retirarmenor(heap,&n,pos);
		v= u;
		if (!ListaAdjVazia(u.vertice,(*grafo))){
			aux = PrimeiroListaAdj(u.vertice,(*grafo));
			FimListaAdj=0;
			printf("Iteracao: %d\n",iteracao);
			while (!FimListaAdj){
				ProxAdj(u.vertice,(*grafo),&vertice,&peso,&aux,&FimListaAdj);
				printf("vertice obtido: %d, peso obtido: %f\n",vertice,peso);
				if (heap[pos[vertice]].peso>(u.peso+peso)){
					
					heap[pos[vertice]].peso = u.peso + peso;
					v.antecessor=u.vertice;
					DiminuiChave(heap, v.vertice, v.peso);
					//printf("valor no heap: %d, %f\n",heap[v.vertice].vertice,heap[v.vertice].peso);
				}
			}
			iteracao++;
		}
		n--;
	}
}

void SolucaoGrafos(Imagem *imagem,int qtd){
	TipoGrafo grafo;

	CriaGrafo(&grafo,*imagem);

	int i,j,vertice,fim;
	float peso;
	int n=grafo.numvertices;

	TipoHeap heap;
	heap = (TipoHeap) malloc((grafo.numvertices+1)*sizeof(CelulaHeap));

	int *pos;
	pos = (int*) malloc((grafo.numvertices+1)*sizeof(int));

	for (i=1;i<=grafo.numvertices;i++){
		heap[i].vertice=i;
		heap[i].peso=infinito;
		heap[i].antecessor=-1;
		pos[i]=i;
	}
	heap[1].peso=20;//CalculaEnergiaPixel(*imagem,0,0);
	heap[2].peso=10;

	construir(heap,grafo.numvertices,pos);
	//ImprimeGrafo(grafo);
	//Ponteiro aux = grafo.InicioLista[1].inicio->prox;
	//Dijkstra(&grafo,heap);
	for (i=1;i<=grafo.numvertices;i++){
		printf("vertice: %d, peso: %f\n",heap[i].vertice,heap[i].peso);
	}
}
